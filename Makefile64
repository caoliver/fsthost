### Generated by Winemaker
SRCDIR                = .
SUBDIRS               =
DLLS                  =
EXES                  = fsthost64

LASH_EXISTS := $(shell if pkg-config --exists lash-1.0; then echo yes; else echo no; fi)
#LAST_EXISTS := 'no'

### Common settings

PKG_CONFIG_MODULES    := glib-2.0
PKG_CONFIG_MODULES    += gtk+-2.0
PKG_CONFIG_MODULES    += jack
PKG_CONFIG_MODULES    += libxml-2.0
ifeq ($(LASH_EXISTS),yes)
PKG_CONFIG_MODULES    += lash-1.0
endif

CEXTRA                := $(shell pkg-config --cflags $(PKG_CONFIG_MODULES)) 
CEXTRA                += -g -Wall -Wno-missing-braces -Wno-multichar
CEXTRA                += -fPIC -O2 -frounding-math -fsignaling-nans -mfpmath=sse -msse2
ifneq (,$(findstring lash-1.0,$(PKG_CONFIG_MODULES)))
CEXTRA                += -DHAVE_LASH
endif
CXXEXTRA              = -mno-cygwin
RCEXTRA               =
INCLUDE_PATH          = -I. -I/usr/include -I/usr/include -I/usr/include/wine -I/usr/include/wine/windows
DLL_PATH              =
LIBRARY_PATH          =
LIBRARIES             := -mwindows
DESTDIR               =
PREFIX                = /usr
LIB_INST_PATH         = $(PREFIX)/lib/x86_64-linux-gnu/wine
BIN_INST_PATH         = $(PREFIX)/bin

### fsthost64.exe sources and settings
fsthost64_MODULE        = fsthost64
fsthost64_C_SRCS        = audiomaster.c fst.c gtk.c jackvst.c jfst.c fxb.c fps.c vstwin.c cpuusage.c info.c midifilter.c
ifeq ($(LASH_EXISTS),yes)
fsthost64_C_SRCS        += lash.c
endif
fsthost64_LDFLAGS       = -m64
fsthost64_DLL_PATH      =
fsthost64_DLLS          = 
fsthost64_LIBRARY_PATH  = $(shell pkg-config --libs $(PKG_CONFIG_MODULES)) -lpthread -lX11
fsthost64_LIBRARIES     =
fsthost64_OBJS          = $(fsthost64_C_SRCS:.c=.o)

### Global source lists
C_SRCS                = $(fsthost64_C_SRCS)
CXX_SRCS              = $(fsthost64_CXX_SRCS)
RC_SRCS               = $(fsthost64_RC_SRCS)

### Tools
CC = gcc
CXX = g++
LINK = winegcc
RC = wrc
WINEBUILD = winebuild

### Generic targets
all: $(SUBDIRS) $(DLLS:%=%.so) $(EXES:%=%)

### Build rules

.PHONY: all clean dummy install

$(SUBDIRS): dummy
	@cd $@ && $(MAKE)

# Implicit rules

.SUFFIXES: .cpp .rc .res
DEFINCL = $(INCLUDE_PATH) $(DEFINES) $(OPTIONS)

.c.o:
	$(CC) -c $(CFLAGS) $(CEXTRA) $(DEFINCL) -o $@ $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(CXXEXTRA) $(DEFINCL) -o $@ $<

.rc.res:
	$(RC) $(RCFLAGS) $(RCEXTRA) $(DEFINCL) -fo$@ $<

# Rules for cleaning

CLEAN_FILES = *.dbg.c y.tab.c y.tab.h lex.yy.c core *.orig *.rej fsthost64.exe* \\\#*\\\# *~ *% .\\\#*

clean:: $(SUBDIRS:%=%/__clean__) $(EXTRASUBDIRS:%=%/__clean__)
	$(RM) $(CLEAN_FILES) $(RC_SRCS:.rc=.res) $(C_SRCS:.c=.o) $(CXX_SRCS:.cpp=.o)
	$(RM) $(DLLS:%=%.dbg.o) $(DLLS:%=%.so)
	$(RM) $(EXES:%=%.dbg.o) $(EXES:%=%.so) $(EXES:%.exe=%)

install: $(fsthost64_MODULE)
	install -Dm 0644 fsthost64.so $(DESTDIR)$(LIB_INST_PATH)/fsthost64.so
	install -Dm 0755 fsthost64 $(DESTDIR)$(BIN_INST_PATH)/fsthost64
	install -Dm 0755 fsthost64_menu $(DESTDIR)$(BIN_INST_PATH)/fsthost64_menu

$(SUBDIRS:%=%/__clean__): dummy
	cd `dirname $@` && $(MAKE) clean

$(EXTRASUBDIRS:%=%/__clean__): dummy
	-cd `dirname $@` && $(RM) $(CLEAN_FILES)

### Target specific build rules
DEFLIB = $(LIBRARY_PATH) $(LIBRARIES) $(DLL_PATH)

$(fsthost64_MODULE): $(fsthost64_OBJS)
	$(LINK) $(fsthost64_LDFLAGS) -o $@ $(fsthost64_OBJS) $(fsthost64_LIBRARY_PATH) $(DEFLIB) $(fsthost64_DLLS:%=-l%) $(fsthost64_LIBRARIES:%=-l%)
# Fix names
	mv $@.exe $@
	mv $@.exe.so $@.so
# Add support for WINE_RT
	sed -i -e 's|-n "$$appdir"|-r "$$appdir/$$appname"|' \
		-e 's|.exe.so|.so|' \
		-e '3i export WINEPATH="$(LIB_INST_PATH)"' \
		-e '3i export WINE_RT=$${WINE_RT:-10}' \
		-e '3i export L_ENABLE_PIPE_SYNC_FOR_APP="$@"' \
		-e '3i export L_RT_POLICY="$${L_RT_POLICY:-FF}"' \
		-e '3i export L_RT_PRIO=$${L_RT_PRIO:-10}' \
		-e '3i export WINE_SRV_RT=$${WINE_SRV_RT:-15}' $@

